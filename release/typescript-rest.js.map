{"version":3,"sources":["typescript-rest.ts"],"names":[],"mappings":"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","file":"typescript-rest.js","sourcesContent":["/// <reference path=\"../typings/index.d.ts\" />\n\"use strict\";\n\nimport * as express from \"express\"; \nimport * as bodyParser from \"body-parser\"; \nimport * as cookieParser from \"cookie-parser\";\nimport \"reflect-metadata\"\n\nexport function Path(path: string) {\n    return function (...args: any[]) {\n\t    if (args.length == 1) {\n\t        return PathTypeDecorator.apply(this, [args[0], path]);\n\t    }\n\t    else if (args.length == 3 && typeof args[2] === \"object\") {\n\t        return PathMethodDecorator.apply(this, [args[0], args[1], args[2], path]);\n\t    }\n\n\t    throw new Error(\"Invalid @Path Decorator declaration.\");\n\t}\n}\n\nexport function GET(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor){\n    processHttpVerb(target, propertyKey, HttpMethod.GET);\n}\n\nexport function POST(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.POST);\n}\n\nexport function PUT(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.PUT);\n}\n\nexport function DELETE(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.DELETE);\n}\n\nexport function HEAD(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.HEAD);\n}\n\nexport function OPTIONS(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.OPTIONS);\n}\n\nexport function PathParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, ParamType.path, name);\n\t}\n}\n\nexport function QueryParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, ParamType.query, name);\n\t}\n}\n\nexport function HeaderParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, ParamType.header, name);\n\t}\n}\n\nexport function CookieParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, ParamType.cookie, name);\n\t}\n}\n\nexport function FormParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, ParamType.form, name);\n\t}\n}\n\nexport enum HttpMethod {\n\tGET,\n\tPOST,\n\tPUT,\n\tDELETE,\n\tHEAD,\n\tOPTIONS\n}\n\nexport abstract class Server {\n\tstatic buildServices(router: express.Router) {\n\t\tlet iternalServer: InternalServer = new InternalServer(router);\n\t\titernalServer.buildServices();\n\t}\n\n\tstatic getPaths(): Set<string> {\n\t\treturn InternalServer.getPaths();\n\t}\n\n\tstatic getHttpMethods(path: string): Set<HttpMethod> {\n\t\treturn InternalServer.getHttpMethods(path);\n\t}\n\n\tstatic setCookiesSecret(secret: string) {\n\t\tInternalServer.cookiesSecret = secret;\n\t}\n\n\tstatic setCookiesDecoder(decoder: Function) {\n\t\tInternalServer.cookiesDecoder = decoder;\n\t}\n}\n\n/**\n * Decorator processor for [[Path]] decorator on classes\n */\nfunction PathTypeDecorator(target: Function, path: string) {\n\tlet classData: ServiceClass = InternalServer.registerServiceClass(target);\n\tclassData.path = path;\n}\n\n/**\n * Decorator processor for [[Path]] decorator on methods\n */\nfunction PathMethodDecorator(target: any, propertyKey: string, \n\t\t\tdescriptor: PropertyDescriptor, path: string) {\n\tlet serviceMethod: ServiceMethod = InternalServer.registerServiceMethod(target, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tserviceMethod.path = path;\n    }\n}\n\n/**\n * Decorator processor for parameter annotations on methods\n */\nfunction processDecoratedParameter(target: Object, propertyKey: string, parameterIndex: number, \n\tparamtType: ParamType, name: string) {\n\tlet serviceMethod: ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n\tif (serviceMethod) { // does not intercept constructor\n\t\tlet paramTypes = Reflect.getMetadata(\"design:paramtypes\", target, propertyKey);\n\n\t\twhile (serviceMethod.parameters.length < paramTypes.length) {\n\t\t\tserviceMethod.parameters.push(new MethodParam(null, \n\t\t\t\t\t\tparamTypes[serviceMethod.parameters.length], ParamType.body));\n\t\t}\n\t\tserviceMethod.parameters[parameterIndex] = new MethodParam(name, paramTypes[parameterIndex], paramtType);\n\t}\n}\n\n/**\n * Decorator processor for HTTP verb annotations on methods\n */\nfunction processHttpVerb(target: any, propertyKey: string,\n\thttpMethod: HttpMethod) {\n\tlet serviceMethod: ServiceMethod = InternalServer.registerServiceMethod(target, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tif (serviceMethod.httpMethod) {\n\t\t\tthrow new Error(\"Method is already annotated with @\" +\n\t\t\t\tserviceMethod.httpMethod +\n\t\t\t\t\". You can only map a method to one HTTP verb.\");\n\t\t}\n\t\tserviceMethod.httpMethod = httpMethod;\n\t\tprocessServiceMethod(target, propertyKey, serviceMethod);\n    }\n}\n\n/**\n * extract metadata for rest methods\n */\nfunction processServiceMethod(target: any, propertyKey: string, serviceMethod: ServiceMethod) {\n\tserviceMethod.name = propertyKey;\n\tserviceMethod.returnType = Reflect.getMetadata(\"design:returntype\", target, propertyKey);\n\tlet paramTypes = Reflect.getMetadata(\"design:paramtypes\", target, propertyKey);\n\twhile (paramTypes.length > serviceMethod.parameters.length) {\n\t\tserviceMethod.parameters.push(new MethodParam(null,\n\t\t\tparamTypes[serviceMethod.parameters.length], ParamType.body));\n\t}\n\n\tserviceMethod.parameters.forEach(param => {\n\t\tif (param.paramType == ParamType.cookie) {\n\t\t\tserviceMethod.mustParseCookies = true;\n\t\t}\n\t\telse if (param.paramType == ParamType.form) {\n\t\t\tif (serviceMethod.mustParseBody) {\n\t\t\t\tthrow Error(\"Can not use form parameters with a body parameter on the same method.\");\n\t\t\t}\n\t\t\tserviceMethod.mustParseForms = true;\n\t\t}\n\t\telse if (param.paramType == ParamType.body) {\n\t\t\tif (serviceMethod.mustParseForms) {\n\t\t\t\tthrow Error(\"Can not use form parameters with a body parameter on the same method.\");\n\t\t\t}\n\t\t\tif (serviceMethod.mustParseBody) {\n\t\t\t\tthrow Error(\"Can not use more than one body parameter on the same method.\");\n\t\t\t}\n\t\t\tserviceMethod.mustParseBody = true;\n\t\t}\n\t});\n}\n\n/**\n * Metadata for REST service classes\n */\nclass ServiceClass {\n\tconstructor(targetClass: Function) {\n\t\tthis.targetClass = targetClass;\n\t\tthis.methods = new Map<string, ServiceMethod>();\n\t}\n\n\ttargetClass: Function;\n\tpath: string;\n\tmethods: Map<string, ServiceMethod>;\n}\n\n/**\n * Metadata for REST service methods\n */\nclass ServiceMethod {\n\tname: string;\n\tpath: string;\n\tresolvedPath: string;\n\thttpMethod: HttpMethod;\n\treturnType: Function;\n\tparameters: Array<MethodParam> = new Array<MethodParam>();\n\tmustParseCookies: boolean = false;\n\tmustParseBody: boolean = false;\n\tmustParseForms: boolean = false;\n}\n\n/**\n * Metadata for REST service method parameters\n */\nclass MethodParam {\n\tconstructor(name: string, type: Function, paramType: ParamType) {\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.paramType = paramType;\n\t}\n\n\tname: string;\n\ttype: Function;\n\tparamType: ParamType;\n}\n\nenum ParamType {\n\tpath,\n\tquery,\n\theader,\n\tcookie,\n\tform,\n\tbody\n}\n\nclass InternalServer {\n\tstatic serverClasses: Map<string, ServiceClass> = new Map<string, ServiceClass>();\n\tstatic paths: Map<string, Set<HttpMethod>> = new Map<string, Set<HttpMethod>>();\n\tstatic pathsResolved: boolean = false;\n\tstatic cookiesSecret: string;\n\tstatic cookiesDecoder: Function;\n\n\trouter: express.Router;\n\n\tconstructor(router: express.Router) {\n\t\tthis.router = router;\n\t }\n\n\tstatic registerServiceClass(target: Function): ServiceClass {\n\t\tInternalServer.pathsResolved = false;\n\t\tlet name: string = target.name || target.constructor.name;\n\t\tif (!InternalServer.serverClasses.has(name)) {\n\t\t\tInternalServer.serverClasses.set(name, new ServiceClass(target));\n\t\t}\n\t\tlet serviceClass: ServiceClass = InternalServer.serverClasses.get(name);\n\t\treturn serviceClass;\n\t}\n\n\tstatic registerServiceMethod(target: Function, methodName: string): ServiceMethod {\n\t\tif (methodName) {\n\t\t\tInternalServer.pathsResolved = false;\n\t\t\tlet classData: ServiceClass = InternalServer.registerServiceClass(target);\n\t\t\tif (!classData.methods.has(methodName)) {\n\t\t\t\tclassData.methods.set(methodName, new ServiceMethod());\n\t\t\t}\n\t\t\tlet serviceMethod: ServiceMethod = classData.methods.get(methodName);\n\t\t\treturn serviceMethod;\n\t\t}\n\t\treturn null;\n\t}\n\n\tbuildServices() {\n\t\tInternalServer.serverClasses.forEach(classData => { \n\t\t\tclassData.methods.forEach(method => {\n\t\t\t\tthis.buildService(classData, method);\n\t\t\t});\n\t\t});\n\t\tInternalServer.pathsResolved = true;\n\t}\n\n\tbuildService(serviceClass: ServiceClass, serviceMethod: ServiceMethod) {\n\t\tlet handler = (req, res) => {\n\t\t\tthis.callTargetEndPoint(serviceClass, serviceMethod, req, res)\n\t\t};\n\n\t\tif (!serviceMethod.resolvedPath) {\n\t\t\tInternalServer.resolvePath(serviceClass, serviceMethod);\n\t\t}\n\n\t\tlet middleware: Array<express.RequestHandler> = this.buildServiceMiddleware(serviceMethod);\n\t\tlet args: any[] = [serviceMethod.resolvedPath];\n\t\targs = args.concat(middleware);\n\t\targs.push(handler);\n\t\tswitch (serviceMethod.httpMethod) {\n\t\t \tcase HttpMethod.GET:\n\t\t\t\tthis.router.get.apply(this.router, args);\n\t\t \tbreak;\n\t\t\tcase HttpMethod.POST:\n\t\t\t\tthis.router.post.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.PUT:\n\t\t\t\tthis.router.put.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.DELETE:\n\t\t\t\tthis.router.delete.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.HEAD:\n\t\t\t\tthis.router.head.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.OPTIONS:\n\t\t\t\tthis.router.options.apply(this.router, args);\n\t\t\tbreak;\n\n\t\t \tdefault:\n\t\t\t\tthrow Error(\"Invalid http method for service [\" + serviceMethod.resolvedPath + \"]\");\n\t\t }\n\t}\n\n\tprivate buildServiceMiddleware(serviceMethod: ServiceMethod): Array<express.RequestHandler> {\n\t\tlet result: Array<express.RequestHandler> = new Array<express.RequestHandler>();\n\n\t\tif (serviceMethod.mustParseCookies) {\n\t\t\tlet args = [];\n\t\t\tif (InternalServer.cookiesSecret) {\n\t\t\t\targs.push(InternalServer.cookiesSecret);\n\t\t\t}\n\t\t\tif (InternalServer.cookiesDecoder){\n\t\t\t\targs.push({ decode: InternalServer.cookiesDecoder });\n\t\t\t}\n\t\t\tresult.push(cookieParser.apply(this, args));\n\t\t}\n\t\tif (serviceMethod.mustParseBody) {\n\t\t\tresult.push(bodyParser.json());\n\t\t\t//TODO adicionar parser de XML para o body\n\t\t}\n\t\tif (serviceMethod.mustParseForms) {\n\t\t\tresult.push(bodyParser.urlencoded({ extended: true }));\n\t\t\t//TODO adicionar o multer para parsing arquivos\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate callTargetEndPoint(serviceClass: ServiceClass, serviceMethod: ServiceMethod, \n\t\treq: express.Request, res: express.Response) {\n\t\tlet serviceObject = Object.create(serviceClass.targetClass);\n\t\tlet args = this.buildArgumentsList(serviceMethod, req);\n\t\tlet result = serviceClass.targetClass.prototype[serviceMethod.name].apply(serviceObject, args);\n\n\t\tif (serviceMethod.returnType) {\n\t\t\tlet serializedType = serviceMethod.returnType.name;\n\t\t\tswitch (serializedType) {\n\t\t\t\tcase \"String\":\n\t\t\t\t\tres.send(result);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Number\":\n\t\t\t\t\tres.send(result.toString());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Boolean\":\n\t\t\t\t\tres.send(result.toString());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Promise\":\n\t\t\t\t\tresult.then(function(value) {\n\t\t\t\t\t\tswitch (typeof value) {\n\t\t\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\t\t\tres.send(result.toString());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\t\t\tres.send(result);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\t\tres.send(result.toString());\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tres.json(value);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch(function(e){\n\t\t\t\t\t\tres.sendStatus(500);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"undefined\":\n\t\t\t\t\tres.send(\"\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tres.json(result);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate buildArgumentsList(serviceMethod: ServiceMethod, req: express.Request) {\n\t\tlet result: Array<any> = new Array<any>();\n\n\t\tserviceMethod.parameters.forEach(param => {\n\t\t\tswitch (param.paramType) {\n\t\t\t\tcase ParamType.path:\n\t\t\t\t\tresult.push(this.convertType(req.params[param.name], param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase ParamType.query:\n\t\t\t\t\tresult.push(this.convertType(req.query[param.name], param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase ParamType.header:\n\t\t\t\t\tresult.push(this.convertType(req.header(param.name), param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase ParamType.cookie:\n\t\t\t\t\tresult.push(this.convertType(req.cookies[param.name], param.type));//TODO validate\n\t\t\t\t\tbreak;\n\t\t\t\tcase ParamType.body:\n\t\t\t\t\tresult.push(this.convertType(req.body, param.type));\n\t\t\t\t\t//TODO parser situacao onde tem arquivo mais outros campos, ver o multer\n\t\t\t\t\tbreak;\n\t\t\t\tcase ParamType.form:\n\t\t\t\t\tresult.push(this.convertType(req.body[param.name], param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(\"Invalid parameter type\");\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate convertType(paramValue: string, paramType: Function): any {\n\t\tlet serializedType = paramType.name;\n\t\tswitch (serializedType) {\n\t\t\tcase \"Number\":\n\t\t\t\treturn paramValue ? parseFloat(paramValue) : 0;\n\t\t\tcase \"Boolean\":\n\t\t\t\treturn paramValue === 'true';\n\t\t\tdefault:\n\t\t\t\treturn paramValue;\n\t\t}\n\t}\n\n//TODO: montar lista de parametros\n// service Logs customizavel\n// Passar um COntext para o servico (request, response, next, etc.... o que tiver mais no express)\n//Parametros do tipo DTO (@BeanParam). separar este arquivo em 3. usar esquema de re-exportar\n// criar uma anotacao para arquivos e tipo de retorno para donwload???\n// controlar cache\n// compressao gzip\n\n\tstatic resolveAllPaths() {\n\t\tif (!InternalServer.pathsResolved) {\n\t\t\tInternalServer.paths.clear();\n\t\t\tInternalServer.serverClasses.forEach(classData => {\n\t\t\t\tclassData.methods.forEach(method => {\n\t\t\t\t\tif (!method.resolvedPath) {\n\t\t\t\t\t\tInternalServer.resolvePath(classData, method);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tInternalServer.pathsResolved = true;\n\t\t}\n\t}\n\n\tstatic getPaths(): Set<string> {\n\t\tInternalServer.resolveAllPaths();\n\t\treturn new Set(InternalServer.paths.keys());\n\t}\n\n\tstatic getHttpMethods(path: string) : Set<HttpMethod>{\n\t\tInternalServer.resolveAllPaths();\n\t\tlet methods : Set<HttpMethod>  = InternalServer.paths.get(path);\n\t\treturn methods || new Set<HttpMethod>();\n\t}\n\n\tprivate static resolvePath(serviceClass: ServiceClass, serviceMethod: ServiceMethod) : void {\n\t\tlet classPath: string = serviceClass.path ? serviceClass.path.trim() : \"\";\n\t\t\t\tlet resolvedPath = classPath.startsWith('/') ? classPath : '/' + classPath;\n\t\tif (resolvedPath.endsWith('/')) {\n\t\t\tresolvedPath = resolvedPath.slice(0, resolvedPath.length - 1);\n\t\t}\n\n\t\tif (serviceMethod.path) {\n\t\t\tlet methodPath: string = serviceMethod.path.trim();\n\t\t\tresolvedPath = classPath + (methodPath.startsWith('/') ? methodPath : '/' + methodPath);\n\t\t}\n\n\t\tlet declaredHttpMethods: Set<HttpMethod> = InternalServer.paths.get(resolvedPath);\n\t\tif (!declaredHttpMethods) {\n\t\t\tdeclaredHttpMethods = new Set<HttpMethod>();\n\t\t\tInternalServer.paths.set(resolvedPath, declaredHttpMethods);\n\t\t}\n\t\tif (declaredHttpMethods.has(serviceMethod.httpMethod)) {\n\t\t\tthrow Error(\"Duplicated declaration for path [\" + resolvedPath + \"], method [\" \n\t\t\t\t+ serviceMethod.httpMethod + \"]. \");\n\t\t}\n\t\tdeclaredHttpMethods.add(serviceMethod.httpMethod);\n\t\tserviceMethod.resolvedPath = resolvedPath;\n\t}\n}\n"]}