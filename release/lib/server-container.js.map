{"version":3,"sources":["lib/server-container.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAM,aAAa,QAAQ,aAAR,CAAnB;AACA,IAAM,eAAe,QAAQ,eAAR,CAArB;AACA,IAAM,SAAS,QAAQ,QAAR,CAAf;AACA,IAAM,WAAW,QAAQ,YAAR,CAAjB;AACA,IAAM,SAAS,QAAQ,iBAAR,CAAf;AACA,IAAM,iBAAiB,QAAQ,gBAAR,CAAvB;;IACM,c;AACF,4BAAY,MAAZ,EAAoB;AAAA;;AAChB,aAAK,MAAL,GAAc,MAAd;AACH;;;;wCAsBe;AAAA;;AACZ,2BAAe,aAAf,CAA6B,OAA7B,CAAqC,qBAAa;AAC9C,0BAAU,OAAV,CAAkB,OAAlB,CAA0B,kBAAU;AAChC,0BAAK,YAAL,CAAkB,SAAlB,EAA6B,MAA7B;AACH,iBAFD;AAGH,aAJD;AAKA,2BAAe,aAAf,GAA+B,IAA/B;AACH;;;qCACY,Y,EAAc,a,EAAe;AAAA;;AACtC,gBAAI,UAAU,SAAV,OAAU,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AAC9B,uBAAK,kBAAL,CAAwB,YAAxB,EAAsC,aAAtC,EAAqD,GAArD,EAA0D,GAA1D,EAA+D,IAA/D;AACH,aAFD;AAGA,gBAAI,CAAC,cAAc,YAAnB,EAAiC;AAC7B,+BAAe,iBAAf,CAAiC,YAAjC,EAA+C,aAA/C;AACH;AACD,gBAAI,aAAa,KAAK,sBAAL,CAA4B,aAA5B,CAAjB;AACA,gBAAI,OAAO,CAAC,cAAc,YAAf,CAAX;AACA,mBAAO,KAAK,MAAL,CAAY,UAAZ,CAAP;AACA,iBAAK,IAAL,CAAU,OAAV;AACA,oBAAQ,cAAc,UAAtB;AACI,qBAAK,eAAe,UAAf,CAA0B,GAA/B;AACI,yBAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,CAAsB,KAAK,MAA3B,EAAmC,IAAnC;AACA;AACJ,qBAAK,eAAe,UAAf,CAA0B,IAA/B;AACI,yBAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,CAAuB,KAAK,MAA5B,EAAoC,IAApC;AACA;AACJ,qBAAK,eAAe,UAAf,CAA0B,GAA/B;AACI,yBAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,CAAsB,KAAK,MAA3B,EAAmC,IAAnC;AACA;AACJ,qBAAK,eAAe,UAAf,CAA0B,MAA/B;AACI,yBAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,CAAyB,KAAK,MAA9B,EAAsC,IAAtC;AACA;AACJ,qBAAK,eAAe,UAAf,CAA0B,IAA/B;AACI,yBAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,CAAuB,KAAK,MAA5B,EAAoC,IAApC;AACA;AACJ,qBAAK,eAAe,UAAf,CAA0B,OAA/B;AACI,yBAAK,MAAL,CAAY,OAAZ,CAAoB,KAApB,CAA0B,KAAK,MAA/B,EAAuC,IAAvC;AACA;AACJ,qBAAK,eAAe,UAAf,CAA0B,KAA/B;AACI,yBAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,CAAwB,KAAK,MAA7B,EAAqC,IAArC;AACA;AACJ;AACI,0BAAM,MAAM,sCAAsC,cAAc,YAApD,GAAmE,GAAzE,CAAN;AAvBR;AAyBH;;;sCACa;AACV,gBAAI,CAAC,KAAK,MAAV,EAAkB;AACd,oBAAI,UAAU,EAAd;AACA,oBAAI,eAAe,QAAnB,EAA6B;AACzB,4BAAQ,IAAR,GAAe,eAAe,QAA9B;AACH;AACD,oBAAI,eAAe,UAAnB,EAA+B;AAC3B,4BAAQ,UAAR,GAAqB,eAAe,UAApC;AACH;AACD,oBAAI,eAAe,UAAnB,EAA+B;AAC3B,4BAAQ,MAAR,GAAiB,eAAe,UAAhC;AACH;AACD,oBAAI,QAAQ,IAAZ,EAAkB;AACd,yBAAK,MAAL,GAAc,OAAO,OAAP,CAAd;AACH,iBAFD,MAGK;AACD,yBAAK,MAAL,GAAc,QAAd;AACH;AACJ;AACD,mBAAO,KAAK,MAAZ;AACH;;;+CACsB,a,EAAe;AAAA;;AAClC,gBAAI,SAAS,IAAI,KAAJ,EAAb;AACA,gBAAI,cAAc,gBAAlB,EAAoC;AAChC,oBAAI,OAAO,EAAX;AACA,oBAAI,eAAe,aAAnB,EAAkC;AAC9B,yBAAK,IAAL,CAAU,eAAe,aAAzB;AACH;AACD,oBAAI,eAAe,cAAnB,EAAmC;AAC/B,yBAAK,IAAL,CAAU,EAAE,QAAQ,eAAe,cAAzB,EAAV;AACH;AACD,uBAAO,IAAP,CAAY,aAAa,KAAb,CAAmB,IAAnB,EAAyB,IAAzB,CAAZ;AACH;AACD,gBAAI,cAAc,aAAlB,EAAiC;AAC7B,uBAAO,IAAP,CAAY,WAAW,IAAX,EAAZ;AACH;AACD,gBAAI,cAAc,cAAlB,EAAkC;AAC9B,uBAAO,IAAP,CAAY,WAAW,UAAX,CAAsB,EAAE,UAAU,IAAZ,EAAtB,CAAZ;AACH;AACD,gBAAI,cAAc,KAAd,CAAoB,MAApB,GAA6B,CAAjC,EAAoC;AAAA;AAChC,wBAAI,UAAU,IAAI,KAAJ,EAAd;AACA,kCAAc,KAAd,CAAoB,OAApB,CAA4B,oBAAY;AACpC,4BAAI,SAAS,UAAb,EAAyB;AACrB,oCAAQ,IAAR,CAAa,EAAE,QAAQ,SAAS,IAAnB,EAAyB,YAAY,CAArC,EAAb;AACH,yBAFD,MAGK;AACD,oCAAQ,IAAR,CAAa,EAAE,QAAQ,SAAS,IAAnB,EAAb;AACH;AACJ,qBAPD;AAQA,2BAAO,IAAP,CAAY,OAAK,WAAL,GAAmB,MAAnB,CAA0B,OAA1B,CAAZ;AAVgC;AAWnC;AACD,mBAAO,MAAP;AACH;;;+CACsB,a,EAAe,O,EAAS;AAC3C,gBAAI,cAAc,iBAAlB,EAAqC;AACjC,oBAAI,cAAc,UAAd,KAA6B,eAAe,UAAf,CAA0B,GAA3D,EAAgE;AAC5D,4BAAQ,QAAR,CAAiB,IAAjB,CAAsB,iBAAtB;AACH;AACD,wBAAQ,QAAR,CAAiB,GAAjB,CAAqB,kBAArB,EAAyC,QAAQ,QAAjD;AACH;AACD,gBAAI,cAAc,eAAlB,EAAmC;AAC/B,wBAAQ,QAAR,CAAiB,IAAjB,CAAsB,QAAtB;AACH;AACJ;;;wCACe,a,EAAe,O,EAAS;AACpC,gBAAI,cAAc,iBAAlB,EAAqC;AACjC,oBAAI,OAAO,QAAQ,OAAR,CAAgB,gBAAhB,CAAiC,cAAc,iBAA/C,CAAX;AACA,oBAAI,IAAJ,EAAU;AACN,4BAAQ,QAAR,GAAmB,IAAnB;AACH;AACJ,aALD,MAMK;AACD,oBAAI,YAAY,QAAQ,OAAR,CAAgB,gBAAhB,EAAhB;AACA,oBAAI,aAAa,UAAU,MAAV,GAAmB,CAApC,EAAuC;AACnC,4BAAQ,QAAR,GAAmB,UAAU,CAAV,CAAnB;AACH;AACJ;AACD,gBAAI,cAAc,eAAlB,EAAmC;AAC/B,oBAAI,SAAS,QAAQ,OAAR,CAAgB,OAAhB,CAAwB,cAAc,eAAtC,CAAb;AACA,oBAAI,MAAJ,EAAY;AACR,4BAAQ,cAAR,GAAyB,MAAzB;AACH,iBAFD,MAGK;AACD,0BAAM,IAAI,OAAO,kBAAX,CAA8B,QAA9B,CAAN;AACH;AACJ;AACD,gBAAI,CAAC,QAAQ,QAAb,EAAuB;AACnB,sBAAM,IAAI,OAAO,kBAAX,CAA8B,iBAA9B,CAAN;AACH;AACJ;;;sCACa,Y,EAAc,O,EAAS;AACjC,gBAAI,gBAAgB,sBAAc,aAAa,WAA3B,CAApB;AACA,gBAAI,aAAa,aAAb,EAAJ,EAAkC;AAC9B,6BAAa,UAAb,CAAwB,OAAxB,CAAgC,UAAC,SAAD,EAAY,GAAZ,EAAoB;AAChD,4BAAQ,SAAR;AACI,6BAAK,SAAS,SAAT,CAAmB,OAAxB;AACI,0CAAc,GAAd,IAAqB,OAArB;AACA;AACJ,6BAAK,SAAS,SAAT,CAAmB,uBAAxB;AACI,0CAAc,GAAd,IAAqB,QAAQ,QAA7B;AACA;AACJ,6BAAK,SAAS,SAAT,CAAmB,cAAxB;AACI,0CAAc,GAAd,IAAqB,QAAQ,cAA7B;AACA;AACJ,6BAAK,SAAS,SAAT,CAAmB,eAAxB;AACI,0CAAc,GAAd,IAAqB,QAAQ,OAA7B;AACA;AACJ,6BAAK,SAAS,SAAT,CAAmB,gBAAxB;AACI,0CAAc,GAAd,IAAqB,QAAQ,QAA7B;AACA;AACJ,6BAAK,SAAS,SAAT,CAAmB,YAAxB;AACI,0CAAc,GAAd,IAAqB,QAAQ,IAA7B;AACA;AACJ;AACI;AApBR;AAsBH,iBAvBD;AAwBH;AACD,mBAAO,aAAP;AACH;;;2CACkB,Y,EAAc,a,EAAe,G,EAAK,G,EAAK,I,EAAM;AAC5D,gBAAI,UAAU,IAAI,eAAe,cAAnB,EAAd;AACA,oBAAQ,OAAR,GAAkB,GAAlB;AACA,oBAAQ,QAAR,GAAmB,GAAnB;AACA,oBAAQ,IAAR,GAAe,IAAf;AACA,iBAAK,eAAL,CAAqB,aAArB,EAAoC,OAApC;AACA,gBAAI,gBAAgB,KAAK,aAAL,CAAmB,YAAnB,EAAiC,OAAjC,CAApB;AACA,gBAAI,OAAO,KAAK,kBAAL,CAAwB,aAAxB,EAAuC,OAAvC,CAAX;AACA,gBAAI,SAAS,aAAa,WAAb,CAAyB,SAAzB,CAAmC,cAAc,IAAjD,EAAuD,KAAvD,CAA6D,aAA7D,EAA4E,IAA5E,CAAb;AACA,iBAAK,sBAAL,CAA4B,aAA5B,EAA2C,OAA3C;AACA,gBAAI,cAAc,UAAlB,EAA8B;AAC1B,oBAAI,iBAAiB,cAAc,UAAd,CAAyB,IAA9C;AACA,wBAAQ,cAAR;AACI,yBAAK,QAAL;AACI,4BAAI,IAAJ,CAAS,MAAT;AACA;AACJ,yBAAK,QAAL;AACI,4BAAI,IAAJ,CAAS,OAAO,QAAP,EAAT;AACA;AACJ,yBAAK,SAAL;AACI,4BAAI,IAAJ,CAAS,OAAO,QAAP,EAAT;AACA;AACJ,yBAAK,SAAL;AACI,4BAAI,OAAO,IAAX;AACA,+BAAO,IAAP,CAAY,UAAU,KAAV,EAAiB;AACzB,iCAAK,SAAL,CAAe,KAAf,EAAsB,GAAtB;AACH,yBAFD,EAEG,KAFH,CAES,UAAU,CAAV,EAAa;AAClB,gCAAI,CAAC,IAAI,WAAT,EAAsB;AAClB,oCAAI,UAAJ,CAAe,GAAf;AACH;AACJ,yBAND;AAOA;AACJ,yBAAK,WAAL;AACI,4BAAI,UAAJ,CAAe,GAAf;AACA;AACJ;AACI,4BAAI,IAAJ,CAAS,MAAT;AACA;AAzBR;AA2BH,aA7BD,MA8BK;AACD,qBAAK,SAAL,CAAe,MAAf,EAAuB,GAAvB;AACH;AACJ;;;kCACS,K,EAAO,G,EAAK;AAAA;;AAClB,2BAAe,KAAf,uDAAe,KAAf;AACI,qBAAK,QAAL;AACI,wBAAI,IAAJ,CAAS,MAAM,QAAN,EAAT;AACA;AACJ,qBAAK,QAAL;AACI,wBAAI,IAAJ,CAAS,KAAT;AACA;AACJ,qBAAK,SAAL;AACI,wBAAI,IAAJ,CAAS,MAAM,QAAN,EAAT;AACA;AACJ,qBAAK,WAAL;AACI,wBAAI,CAAC,IAAI,WAAT,EAAsB;AAClB,4BAAI,UAAJ,CAAe,GAAf;AACH;AACD;AACJ;AACI,wBAAI,MAAM,WAAN,CAAkB,IAAlB,IAA0B,SAA9B,EAAyC;AAAA;AACrC,gCAAI,aAAJ;AACA,kCAAM,IAAN,CAAW,UAAU,GAAV,EAAe;AACtB,qCAAK,SAAL,CAAe,GAAf,EAAoB,GAApB;AACH,6BAFD,EAEG,KAFH,CAES,UAAU,CAAV,EAAa;AAClB,oCAAI,CAAC,IAAI,WAAT,EAAsB;AAClB,wCAAI,UAAJ,CAAe,GAAf;AACH;AACJ,6BAND;AAFqC;AASxC,qBATD,MAUK;AACD,4BAAI,IAAJ,CAAS,KAAT;AACH;AA5BT;AA8BH;;;2CACkB,a,EAAe,O,EAAS;AAAA;;AACvC,gBAAI,SAAS,IAAI,KAAJ,EAAb;AACA,0BAAc,UAAd,CAAyB,OAAzB,CAAiC,iBAAS;AACtC,wBAAQ,MAAM,SAAd;AACI,yBAAK,SAAS,SAAT,CAAmB,IAAxB;AACI,+BAAO,IAAP,CAAY,OAAK,WAAL,CAAiB,QAAQ,OAAR,CAAgB,MAAhB,CAAuB,MAAM,IAA7B,CAAjB,EAAqD,MAAM,IAA3D,CAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,KAAxB;AACI,+BAAO,IAAP,CAAY,OAAK,WAAL,CAAiB,QAAQ,OAAR,CAAgB,KAAhB,CAAsB,MAAM,IAA5B,CAAjB,EAAoD,MAAM,IAA1D,CAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,MAAxB;AACI,+BAAO,IAAP,CAAY,OAAK,WAAL,CAAiB,QAAQ,OAAR,CAAgB,MAAhB,CAAuB,MAAM,IAA7B,CAAjB,EAAqD,MAAM,IAA3D,CAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,MAAxB;AACI,+BAAO,IAAP,CAAY,OAAK,WAAL,CAAiB,QAAQ,OAAR,CAAgB,OAAhB,CAAwB,MAAM,IAA9B,CAAjB,EAAsD,MAAM,IAA5D,CAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,IAAxB;AACI,+BAAO,IAAP,CAAY,OAAK,WAAL,CAAiB,QAAQ,OAAR,CAAgB,IAAjC,EAAuC,MAAM,IAA7C,CAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,IAAxB;AACI,4BAAI,QAAQ,QAAQ,OAAR,CAAgB,KAAhB,CAAsB,MAAM,IAA5B,CAAZ;AACA,4BAAI,SAAS,MAAM,MAAN,GAAe,CAA5B,EAA+B;AAC3B,mCAAO,IAAP,CAAY,MAAM,CAAN,CAAZ;AACH;AACD;AACJ,yBAAK,SAAS,SAAT,CAAmB,KAAxB;AACI,+BAAO,IAAP,CAAY,QAAQ,OAAR,CAAgB,KAAhB,CAAsB,MAAM,IAA5B,CAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,IAAxB;AACI,+BAAO,IAAP,CAAY,OAAK,WAAL,CAAiB,QAAQ,OAAR,CAAgB,IAAhB,CAAqB,MAAM,IAA3B,CAAjB,EAAmD,MAAM,IAAzD,CAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,OAAxB;AACI,+BAAO,IAAP,CAAY,OAAZ;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,eAAxB;AACI,+BAAO,IAAP,CAAY,QAAQ,OAApB;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,gBAAxB;AACI,+BAAO,IAAP,CAAY,QAAQ,QAApB;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,YAAxB;AACI,+BAAO,IAAP,CAAY,QAAQ,IAApB;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,cAAxB;AACI,+BAAO,IAAP,CAAY,QAAQ,cAApB;AACA;AACJ,yBAAK,SAAS,SAAT,CAAmB,uBAAxB;AACI,+BAAO,IAAP,CAAY,QAAQ,QAApB;AACA;AACJ;AACI,8BAAM,MAAM,wBAAN,CAAN;AA/CR;AAiDH,aAlDD;AAmDA,mBAAO,MAAP;AACH;;;oCACW,U,EAAY,S,EAAW;AAC/B,gBAAI,iBAAiB,UAAU,IAA/B;AACA,oBAAQ,cAAR;AACI,qBAAK,QAAL;AACI,2BAAO,aAAa,WAAW,UAAX,CAAb,GAAsC,CAA7C;AACJ,qBAAK,SAAL;AACI,2BAAO,eAAe,MAAtB;AACJ;AACI,2BAAO,UAAP;AANR;AAQH;;;6CAvU2B,M,EAAQ;AAChC,2BAAe,aAAf,GAA+B,KAA/B;AACA,gBAAI,OAAO,OAAO,IAAP,IAAe,OAAO,WAAP,CAAmB,IAA7C;AACA,gBAAI,CAAC,eAAe,aAAf,CAA6B,GAA7B,CAAiC,IAAjC,CAAL,EAA6C;AACzC,+BAAe,aAAf,CAA6B,GAA7B,CAAiC,IAAjC,EAAuC,IAAI,SAAS,YAAb,CAA0B,MAA1B,CAAvC;AACH;AACD,gBAAI,eAAe,eAAe,aAAf,CAA6B,GAA7B,CAAiC,IAAjC,CAAnB;AACA,mBAAO,YAAP;AACH;;;8CAC4B,M,EAAQ,U,EAAY;AAC7C,gBAAI,UAAJ,EAAgB;AACZ,+BAAe,aAAf,GAA+B,KAA/B;AACA,oBAAI,YAAY,eAAe,oBAAf,CAAoC,MAApC,CAAhB;AACA,oBAAI,CAAC,UAAU,OAAV,CAAkB,GAAlB,CAAsB,UAAtB,CAAL,EAAwC;AACpC,8BAAU,OAAV,CAAkB,GAAlB,CAAsB,UAAtB,EAAkC,IAAI,SAAS,aAAb,EAAlC;AACH;AACD,oBAAI,gBAAgB,UAAU,OAAV,CAAkB,GAAlB,CAAsB,UAAtB,CAApB;AACA,uBAAO,aAAP;AACH;AACD,mBAAO,IAAP;AACH;;;0CAoTwB;AACrB,gBAAI,CAAC,eAAe,aAApB,EAAmC;AAC/B,+BAAe,KAAf,CAAqB,KAArB;AACA,+BAAe,aAAf,CAA6B,OAA7B,CAAqC,qBAAa;AAC9C,8BAAU,OAAV,CAAkB,OAAlB,CAA0B,kBAAU;AAChC,4BAAI,CAAC,OAAO,YAAZ,EAA0B;AACtB,2CAAe,iBAAf,CAAiC,SAAjC,EAA4C,MAA5C;AACH;AACJ,qBAJD;AAKH,iBAND;AAOA,+BAAe,aAAf,GAA+B,IAA/B;AACH;AACJ;;;mCACiB;AACd,2BAAe,eAAf;AACA,mBAAO,kBAAQ,eAAe,KAAf,CAAqB,IAArB,EAAR,CAAP;AACH;;;uCACqB,I,EAAM;AACxB,2BAAe,eAAf;AACA,gBAAI,UAAU,eAAe,KAAf,CAAqB,GAArB,CAAyB,IAAzB,CAAd;AACA,mBAAO,WAAW,mBAAlB;AACH;;;yCACuB,Y,EAAc,a,EAAe;AACjD,gBAAI,oBAAoB,IAAI,KAAJ,EAAxB;AACA,gBAAI,aAAa,SAAjB,EAA4B;AACxB,6BAAa,SAAb,CAAuB,OAAvB,CAA+B,gBAAQ;AACnC,sCAAkB,IAAlB,CAAuB,IAAvB;AACH,iBAFD;AAGH;AACD,gBAAI,cAAc,SAAlB,EAA6B;AACzB,8BAAc,SAAd,CAAwB,OAAxB,CAAgC,gBAAQ;AACpC,sCAAkB,IAAlB,CAAuB,IAAvB;AACH,iBAFD;AAGH;AACD,gBAAI,kBAAkB,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,8BAAc,iBAAd,GAAkC,iBAAlC;AACH;AACJ;;;uCACqB,Y,EAAc,a,EAAe;AAC/C,gBAAI,kBAAkB,IAAI,KAAJ,EAAtB;AACA,gBAAI,aAAa,OAAjB,EAA0B;AACtB,6BAAa,OAAb,CAAqB,OAArB,CAA6B,kBAAU;AACnC,oCAAgB,IAAhB,CAAqB,MAArB;AACH,iBAFD;AAGH;AACD,gBAAI,cAAc,OAAlB,EAA2B;AACvB,8BAAc,OAAd,CAAsB,OAAtB,CAA8B,kBAAU;AACpC,oCAAgB,IAAhB,CAAqB,MAArB;AACH,iBAFD;AAGH;AACD,gBAAI,gBAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,8BAAc,eAAd,GAAgC,eAAhC;AACH;AACJ;;;0CACwB,Y,EAAc,a,EAAe;AAClD,2BAAe,gBAAf,CAAgC,YAAhC,EAA8C,aAA9C;AACA,2BAAe,cAAf,CAA8B,YAA9B,EAA4C,aAA5C;AACA,2BAAe,WAAf,CAA2B,YAA3B,EAAyC,aAAzC;AACH;;;oCACkB,Y,EAAc,a,EAAe;AAC5C,gBAAI,YAAY,aAAa,IAAb,GAAoB,aAAa,IAAb,CAAkB,IAAlB,EAApB,GAA+C,EAA/D;AACA,gBAAI,eAAe,UAAU,UAAV,CAAqB,GAArB,IAA4B,SAA5B,GAAwC,MAAM,SAAjE;AACA,gBAAI,aAAa,QAAb,CAAsB,GAAtB,CAAJ,EAAgC;AAC5B,+BAAe,aAAa,KAAb,CAAmB,CAAnB,EAAsB,aAAa,MAAb,GAAsB,CAA5C,CAAf;AACH;AACD,gBAAI,cAAc,IAAlB,EAAwB;AACpB,oBAAI,aAAa,cAAc,IAAd,CAAmB,IAAnB,EAAjB;AACA,+BAAe,aAAa,WAAW,UAAX,CAAsB,GAAtB,IAA6B,UAA7B,GAA0C,MAAM,UAA7D,CAAf;AACH;AACD,gBAAI,sBAAsB,eAAe,KAAf,CAAqB,GAArB,CAAyB,YAAzB,CAA1B;AACA,gBAAI,CAAC,mBAAL,EAA0B;AACtB,sCAAsB,mBAAtB;AACA,+BAAe,KAAf,CAAqB,GAArB,CAAyB,YAAzB,EAAuC,mBAAvC;AACH;AACD,gBAAI,oBAAoB,GAApB,CAAwB,cAAc,UAAtC,CAAJ,EAAuD;AACnD,sBAAM,MAAM,sCAAsC,YAAtC,GAAqD,aAArD,GACN,cAAc,UADR,GACqB,KAD3B,CAAN;AAEH;AACD,gCAAoB,GAApB,CAAwB,cAAc,UAAtC;AACA,0BAAc,YAAd,GAA6B,YAA7B;AACH;;;;;AAEL,eAAe,aAAf,GAA+B,mBAA/B;AACA,eAAe,KAAf,GAAuB,mBAAvB;AACA,eAAe,aAAf,GAA+B,KAA/B;AACA,QAAQ,cAAR,GAAyB,cAAzB","file":"server-container.js","sourcesContent":["\"use strict\";\nconst bodyParser = require(\"body-parser\");\nconst cookieParser = require(\"cookie-parser\");\nconst multer = require(\"multer\");\nconst metadata = require(\"./metadata\");\nconst Errors = require(\"./server-errors\");\nconst server_types_1 = require(\"./server-types\");\nclass InternalServer {\n    constructor(router) {\n        this.router = router;\n    }\n    static registerServiceClass(target) {\n        InternalServer.pathsResolved = false;\n        let name = target.name || target.constructor.name;\n        if (!InternalServer.serverClasses.has(name)) {\n            InternalServer.serverClasses.set(name, new metadata.ServiceClass(target));\n        }\n        let serviceClass = InternalServer.serverClasses.get(name);\n        return serviceClass;\n    }\n    static registerServiceMethod(target, methodName) {\n        if (methodName) {\n            InternalServer.pathsResolved = false;\n            let classData = InternalServer.registerServiceClass(target);\n            if (!classData.methods.has(methodName)) {\n                classData.methods.set(methodName, new metadata.ServiceMethod());\n            }\n            let serviceMethod = classData.methods.get(methodName);\n            return serviceMethod;\n        }\n        return null;\n    }\n    buildServices() {\n        InternalServer.serverClasses.forEach(classData => {\n            classData.methods.forEach(method => {\n                this.buildService(classData, method);\n            });\n        });\n        InternalServer.pathsResolved = true;\n    }\n    buildService(serviceClass, serviceMethod) {\n        let handler = (req, res, next) => {\n            this.callTargetEndPoint(serviceClass, serviceMethod, req, res, next);\n        };\n        if (!serviceMethod.resolvedPath) {\n            InternalServer.resolveProperties(serviceClass, serviceMethod);\n        }\n        let middleware = this.buildServiceMiddleware(serviceMethod);\n        let args = [serviceMethod.resolvedPath];\n        args = args.concat(middleware);\n        args.push(handler);\n        switch (serviceMethod.httpMethod) {\n            case server_types_1.HttpMethod.GET:\n                this.router.get.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.POST:\n                this.router.post.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.PUT:\n                this.router.put.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.DELETE:\n                this.router.delete.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.HEAD:\n                this.router.head.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.OPTIONS:\n                this.router.options.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.PATCH:\n                this.router.patch.apply(this.router, args);\n                break;\n            default:\n                throw Error(\"Invalid http method for service [\" + serviceMethod.resolvedPath + \"]\");\n        }\n    }\n    getUploader() {\n        if (!this.upload) {\n            let options = {};\n            if (InternalServer.fileDest) {\n                options.dest = InternalServer.fileDest;\n            }\n            if (InternalServer.fileFilter) {\n                options.fileFilter = InternalServer.fileFilter;\n            }\n            if (InternalServer.fileLimits) {\n                options.limits = InternalServer.fileLimits;\n            }\n            if (options.dest) {\n                this.upload = multer(options);\n            }\n            else {\n                this.upload = multer();\n            }\n        }\n        return this.upload;\n    }\n    buildServiceMiddleware(serviceMethod) {\n        let result = new Array();\n        if (serviceMethod.mustParseCookies) {\n            let args = [];\n            if (InternalServer.cookiesSecret) {\n                args.push(InternalServer.cookiesSecret);\n            }\n            if (InternalServer.cookiesDecoder) {\n                args.push({ decode: InternalServer.cookiesDecoder });\n            }\n            result.push(cookieParser.apply(this, args));\n        }\n        if (serviceMethod.mustParseBody) {\n            result.push(bodyParser.json());\n        }\n        if (serviceMethod.mustParseForms) {\n            result.push(bodyParser.urlencoded({ extended: true }));\n        }\n        if (serviceMethod.files.length > 0) {\n            let options = new Array();\n            serviceMethod.files.forEach(fileData => {\n                if (fileData.singleFile) {\n                    options.push({ \"name\": fileData.name, \"maxCount\": 1 });\n                }\n                else {\n                    options.push({ \"name\": fileData.name });\n                }\n            });\n            result.push(this.getUploader().fields(options));\n        }\n        return result;\n    }\n    processResponseHeaders(serviceMethod, context) {\n        if (serviceMethod.resolvedLanguages) {\n            if (serviceMethod.httpMethod === server_types_1.HttpMethod.GET) {\n                context.response.vary(\"Accept-Language\");\n            }\n            context.response.set(\"Content-Language\", context.language);\n        }\n        if (serviceMethod.resolvedAccepts) {\n            context.response.vary(\"Accept\");\n        }\n    }\n    checkAcceptance(serviceMethod, context) {\n        if (serviceMethod.resolvedLanguages) {\n            let lang = context.request.acceptsLanguages(serviceMethod.resolvedLanguages);\n            if (lang) {\n                context.language = lang;\n            }\n        }\n        else {\n            let languages = context.request.acceptsLanguages();\n            if (languages && languages.length > 0) {\n                context.language = languages[0];\n            }\n        }\n        if (serviceMethod.resolvedAccepts) {\n            let accept = context.request.accepts(serviceMethod.resolvedAccepts);\n            if (accept) {\n                context.preferredMedia = accept;\n            }\n            else {\n                throw new Errors.NotAcceptableError(\"Accept\");\n            }\n        }\n        if (!context.language) {\n            throw new Errors.NotAcceptableError(\"Accept-Language\");\n        }\n    }\n    createService(serviceClass, context) {\n        let serviceObject = Object.create(serviceClass.targetClass);\n        if (serviceClass.hasProperties()) {\n            serviceClass.properties.forEach((paramType, key) => {\n                switch (paramType) {\n                    case metadata.ParamType.context:\n                        serviceObject[key] = context;\n                        break;\n                    case metadata.ParamType.context_accept_language:\n                        serviceObject[key] = context.language;\n                        break;\n                    case metadata.ParamType.context_accept:\n                        serviceObject[key] = context.preferredMedia;\n                        break;\n                    case metadata.ParamType.context_request:\n                        serviceObject[key] = context.request;\n                        break;\n                    case metadata.ParamType.context_response:\n                        serviceObject[key] = context.response;\n                        break;\n                    case metadata.ParamType.context_next:\n                        serviceObject[key] = context.next;\n                        break;\n                    default:\n                        break;\n                }\n            });\n        }\n        return serviceObject;\n    }\n    callTargetEndPoint(serviceClass, serviceMethod, req, res, next) {\n        let context = new server_types_1.ServiceContext();\n        context.request = req;\n        context.response = res;\n        context.next = next;\n        this.checkAcceptance(serviceMethod, context);\n        let serviceObject = this.createService(serviceClass, context);\n        let args = this.buildArgumentsList(serviceMethod, context);\n        let result = serviceClass.targetClass.prototype[serviceMethod.name].apply(serviceObject, args);\n        this.processResponseHeaders(serviceMethod, context);\n        if (serviceMethod.returnType) {\n            let serializedType = serviceMethod.returnType.name;\n            switch (serializedType) {\n                case \"String\":\n                    res.send(result);\n                    break;\n                case \"Number\":\n                    res.send(result.toString());\n                    break;\n                case \"Boolean\":\n                    res.send(result.toString());\n                    break;\n                case \"Promise\":\n                    let self = this;\n                    result.then(function (value) {\n                        self.sendValue(value, res);\n                    }).catch(function (e) {\n                        if (!res.headersSent) {\n                            res.sendStatus(500);\n                        }\n                    });\n                    break;\n                case \"undefined\":\n                    res.sendStatus(204);\n                    break;\n                default:\n                    res.json(result);\n                    break;\n            }\n        }\n        else {\n            this.sendValue(result, res);\n        }\n    }\n    sendValue(value, res) {\n        switch (typeof value) {\n            case \"number\":\n                res.send(value.toString());\n                break;\n            case \"string\":\n                res.send(value);\n                break;\n            case \"boolean\":\n                res.send(value.toString());\n                break;\n            case \"undefined\":\n                if (!res.headersSent) {\n                    res.sendStatus(204);\n                }\n                break;\n            default:\n                if (value.constructor.name == \"Promise\") {\n                    let self = this;\n                    value.then(function (val) {\n                        self.sendValue(val, res);\n                    }).catch(function (e) {\n                        if (!res.headersSent) {\n                            res.sendStatus(500);\n                        }\n                    });\n                }\n                else {\n                    res.json(value);\n                }\n        }\n    }\n    buildArgumentsList(serviceMethod, context) {\n        let result = new Array();\n        serviceMethod.parameters.forEach(param => {\n            switch (param.paramType) {\n                case metadata.ParamType.path:\n                    result.push(this.convertType(context.request.params[param.name], param.type));\n                    break;\n                case metadata.ParamType.query:\n                    result.push(this.convertType(context.request.query[param.name], param.type));\n                    break;\n                case metadata.ParamType.header:\n                    result.push(this.convertType(context.request.header(param.name), param.type));\n                    break;\n                case metadata.ParamType.cookie:\n                    result.push(this.convertType(context.request.cookies[param.name], param.type));\n                    break;\n                case metadata.ParamType.body:\n                    result.push(this.convertType(context.request.body, param.type));\n                    break;\n                case metadata.ParamType.file:\n                    let files = context.request.files[param.name];\n                    if (files && files.length > 0) {\n                        result.push(files[0]);\n                    }\n                    break;\n                case metadata.ParamType.files:\n                    result.push(context.request.files[param.name]);\n                    break;\n                case metadata.ParamType.form:\n                    result.push(this.convertType(context.request.body[param.name], param.type));\n                    break;\n                case metadata.ParamType.context:\n                    result.push(context);\n                    break;\n                case metadata.ParamType.context_request:\n                    result.push(context.request);\n                    break;\n                case metadata.ParamType.context_response:\n                    result.push(context.response);\n                    break;\n                case metadata.ParamType.context_next:\n                    result.push(context.next);\n                    break;\n                case metadata.ParamType.context_accept:\n                    result.push(context.preferredMedia);\n                    break;\n                case metadata.ParamType.context_accept_language:\n                    result.push(context.language);\n                    break;\n                default:\n                    throw Error(\"Invalid parameter type\");\n            }\n        });\n        return result;\n    }\n    convertType(paramValue, paramType) {\n        let serializedType = paramType.name;\n        switch (serializedType) {\n            case \"Number\":\n                return paramValue ? parseFloat(paramValue) : 0;\n            case \"Boolean\":\n                return paramValue === 'true';\n            default:\n                return paramValue;\n        }\n    }\n    static resolveAllPaths() {\n        if (!InternalServer.pathsResolved) {\n            InternalServer.paths.clear();\n            InternalServer.serverClasses.forEach(classData => {\n                classData.methods.forEach(method => {\n                    if (!method.resolvedPath) {\n                        InternalServer.resolveProperties(classData, method);\n                    }\n                });\n            });\n            InternalServer.pathsResolved = true;\n        }\n    }\n    static getPaths() {\n        InternalServer.resolveAllPaths();\n        return new Set(InternalServer.paths.keys());\n    }\n    static getHttpMethods(path) {\n        InternalServer.resolveAllPaths();\n        let methods = InternalServer.paths.get(path);\n        return methods || new Set();\n    }\n    static resolveLanguages(serviceClass, serviceMethod) {\n        let resolvedLanguages = new Array();\n        if (serviceClass.languages) {\n            serviceClass.languages.forEach(lang => {\n                resolvedLanguages.push(lang);\n            });\n        }\n        if (serviceMethod.languages) {\n            serviceMethod.languages.forEach(lang => {\n                resolvedLanguages.push(lang);\n            });\n        }\n        if (resolvedLanguages.length > 0) {\n            serviceMethod.resolvedLanguages = resolvedLanguages;\n        }\n    }\n    static resolveAccepts(serviceClass, serviceMethod) {\n        let resolvedAccepts = new Array();\n        if (serviceClass.accepts) {\n            serviceClass.accepts.forEach(accept => {\n                resolvedAccepts.push(accept);\n            });\n        }\n        if (serviceMethod.accepts) {\n            serviceMethod.accepts.forEach(accept => {\n                resolvedAccepts.push(accept);\n            });\n        }\n        if (resolvedAccepts.length > 0) {\n            serviceMethod.resolvedAccepts = resolvedAccepts;\n        }\n    }\n    static resolveProperties(serviceClass, serviceMethod) {\n        InternalServer.resolveLanguages(serviceClass, serviceMethod);\n        InternalServer.resolveAccepts(serviceClass, serviceMethod);\n        InternalServer.resolvePath(serviceClass, serviceMethod);\n    }\n    static resolvePath(serviceClass, serviceMethod) {\n        let classPath = serviceClass.path ? serviceClass.path.trim() : \"\";\n        let resolvedPath = classPath.startsWith('/') ? classPath : '/' + classPath;\n        if (resolvedPath.endsWith('/')) {\n            resolvedPath = resolvedPath.slice(0, resolvedPath.length - 1);\n        }\n        if (serviceMethod.path) {\n            let methodPath = serviceMethod.path.trim();\n            resolvedPath = classPath + (methodPath.startsWith('/') ? methodPath : '/' + methodPath);\n        }\n        let declaredHttpMethods = InternalServer.paths.get(resolvedPath);\n        if (!declaredHttpMethods) {\n            declaredHttpMethods = new Set();\n            InternalServer.paths.set(resolvedPath, declaredHttpMethods);\n        }\n        if (declaredHttpMethods.has(serviceMethod.httpMethod)) {\n            throw Error(\"Duplicated declaration for path [\" + resolvedPath + \"], method [\"\n                + serviceMethod.httpMethod + \"]. \");\n        }\n        declaredHttpMethods.add(serviceMethod.httpMethod);\n        serviceMethod.resolvedPath = resolvedPath;\n    }\n}\nInternalServer.serverClasses = new Map();\nInternalServer.paths = new Map();\nInternalServer.pathsResolved = false;\nexports.InternalServer = InternalServer;\n"]}