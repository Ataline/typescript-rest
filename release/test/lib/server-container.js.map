{"version":3,"sources":["lib/server-container.js"],"names":["_map","require","_map2","_interopRequireDefault","_set","_set2","_promise","_promise2","_typeof2","_typeof3","_create","_create2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","obj","__esModule","default","bodyParser","cookieParser","multer","metadata","Errors","server_types_1","InternalServer","router","key","value","buildServices","_this","serverClasses","forEach","classData","methods","method","buildService","pathsResolved","serviceClass","serviceMethod","_this2","handler","req","res","next","callTargetEndPoint","resolvedPath","resolveProperties","middleware","buildServiceMiddleware","args","concat","push","httpMethod","HttpMethod","GET","get","apply","POST","post","PUT","put","DELETE","delete","HEAD","head","OPTIONS","options","PATCH","patch","Error","getUploader","upload","fileDest","dest","fileFilter","fileLimits","limits","_this3","result","Array","mustParseCookies","cookiesSecret","cookiesDecoder","decode","mustParseBody","json","mustParseForms","urlencoded","extended","files","length","fileData","singleFile","name","fields","processResponseHeaders","context","resolvedLanguages","response","vary","set","language","resolvedAccepts","checkAcceptance","lang","request","acceptsLanguages","languages","accept","accepts","NotAcceptableError","createService","serviceObject","targetClass","hasProperties","properties","paramType","ParamType","context_accept_language","context_accept","context_request","context_response","context_next","ServiceContext","buildArgumentsList","prototype","sendValue","_this4","send","toString","headersSent","sendStatus","location","ReferencedResource","statusCode","then","self","val","catch","err","_this5","parameters","param","path","convertType","params","type","query","header","cookie","cookies","body","file","form","paramValue","serializedType","parseFloat","registerServiceClass","target","constructor","has","ServiceClass","registerServiceMethod","methodName","ServiceMethod","resolveAllPaths","paths","clear","getPaths","keys","getHttpMethods","resolveLanguages","resolveAccepts","resolvePath","classPath","trim","startsWith","endsWith","slice","methodPath","declaredHttpMethods","add","exports"],"mappings":"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","file":"server-container.js","sourcesContent":["\"use strict\";\nconst bodyParser = require(\"body-parser\");\nconst cookieParser = require(\"cookie-parser\");\nconst multer = require(\"multer\");\nconst metadata = require(\"./metadata\");\nconst Errors = require(\"./server-errors\");\nconst server_types_1 = require(\"./server-types\");\nclass InternalServer {\n    constructor(router) {\n        this.router = router;\n    }\n    static registerServiceClass(target) {\n        InternalServer.pathsResolved = false;\n        let name = target.name || target.constructor.name;\n        if (!InternalServer.serverClasses.has(name)) {\n            InternalServer.serverClasses.set(name, new metadata.ServiceClass(target));\n        }\n        let serviceClass = InternalServer.serverClasses.get(name);\n        return serviceClass;\n    }\n    static registerServiceMethod(target, methodName) {\n        if (methodName) {\n            InternalServer.pathsResolved = false;\n            let classData = InternalServer.registerServiceClass(target);\n            if (!classData.methods.has(methodName)) {\n                classData.methods.set(methodName, new metadata.ServiceMethod());\n            }\n            let serviceMethod = classData.methods.get(methodName);\n            return serviceMethod;\n        }\n        return null;\n    }\n    buildServices() {\n        InternalServer.serverClasses.forEach(classData => {\n            classData.methods.forEach(method => {\n                this.buildService(classData, method);\n            });\n        });\n        InternalServer.pathsResolved = true;\n    }\n    buildService(serviceClass, serviceMethod) {\n        let handler = (req, res, next) => {\n            this.callTargetEndPoint(serviceClass, serviceMethod, req, res, next);\n        };\n        if (!serviceMethod.resolvedPath) {\n            InternalServer.resolveProperties(serviceClass, serviceMethod);\n        }\n        let middleware = this.buildServiceMiddleware(serviceMethod);\n        let args = [serviceMethod.resolvedPath];\n        args = args.concat(middleware);\n        args.push(handler);\n        switch (serviceMethod.httpMethod) {\n            case server_types_1.HttpMethod.GET:\n                this.router.get.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.POST:\n                this.router.post.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.PUT:\n                this.router.put.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.DELETE:\n                this.router.delete.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.HEAD:\n                this.router.head.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.OPTIONS:\n                this.router.options.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.PATCH:\n                this.router.patch.apply(this.router, args);\n                break;\n            default:\n                throw Error(\"Invalid http method for service [\" + serviceMethod.resolvedPath + \"]\");\n        }\n    }\n    getUploader() {\n        if (!this.upload) {\n            let options = {};\n            if (InternalServer.fileDest) {\n                options.dest = InternalServer.fileDest;\n            }\n            if (InternalServer.fileFilter) {\n                options.fileFilter = InternalServer.fileFilter;\n            }\n            if (InternalServer.fileLimits) {\n                options.limits = InternalServer.fileLimits;\n            }\n            if (options.dest) {\n                this.upload = multer(options);\n            }\n            else {\n                this.upload = multer();\n            }\n        }\n        return this.upload;\n    }\n    buildServiceMiddleware(serviceMethod) {\n        let result = new Array();\n        if (serviceMethod.mustParseCookies) {\n            let args = [];\n            if (InternalServer.cookiesSecret) {\n                args.push(InternalServer.cookiesSecret);\n            }\n            if (InternalServer.cookiesDecoder) {\n                args.push({ decode: InternalServer.cookiesDecoder });\n            }\n            result.push(cookieParser.apply(this, args));\n        }\n        if (serviceMethod.mustParseBody) {\n            result.push(bodyParser.json());\n        }\n        if (serviceMethod.mustParseForms) {\n            result.push(bodyParser.urlencoded({ extended: true }));\n        }\n        if (serviceMethod.files.length > 0) {\n            let options = new Array();\n            serviceMethod.files.forEach(fileData => {\n                if (fileData.singleFile) {\n                    options.push({ \"name\": fileData.name, \"maxCount\": 1 });\n                }\n                else {\n                    options.push({ \"name\": fileData.name });\n                }\n            });\n            result.push(this.getUploader().fields(options));\n        }\n        return result;\n    }\n    processResponseHeaders(serviceMethod, context) {\n        if (serviceMethod.resolvedLanguages) {\n            if (serviceMethod.httpMethod === server_types_1.HttpMethod.GET) {\n                context.response.vary(\"Accept-Language\");\n            }\n            context.response.set(\"Content-Language\", context.language);\n        }\n        if (serviceMethod.resolvedAccepts) {\n            context.response.vary(\"Accept\");\n        }\n    }\n    checkAcceptance(serviceMethod, context) {\n        if (serviceMethod.resolvedLanguages) {\n            let lang = context.request.acceptsLanguages(serviceMethod.resolvedLanguages);\n            if (lang) {\n                context.language = lang;\n            }\n        }\n        else {\n            let languages = context.request.acceptsLanguages();\n            if (languages && languages.length > 0) {\n                context.language = languages[0];\n            }\n        }\n        if (serviceMethod.resolvedAccepts) {\n            let accept = context.request.accepts(serviceMethod.resolvedAccepts);\n            if (accept) {\n                context.accept = accept;\n            }\n            else {\n                throw new Errors.NotAcceptableError(\"Accept\");\n            }\n        }\n        if (!context.language) {\n            throw new Errors.NotAcceptableError(\"Accept-Language\");\n        }\n    }\n    createService(serviceClass, context) {\n        let serviceObject = Object.create(serviceClass.targetClass);\n        if (serviceClass.hasProperties()) {\n            serviceClass.properties.forEach((paramType, key) => {\n                switch (paramType) {\n                    case metadata.ParamType.context:\n                        serviceObject[key] = context;\n                        break;\n                    case metadata.ParamType.context_accept_language:\n                        serviceObject[key] = context.language;\n                        break;\n                    case metadata.ParamType.context_accept:\n                        serviceObject[key] = context.accept;\n                        break;\n                    case metadata.ParamType.context_request:\n                        serviceObject[key] = context.request;\n                        break;\n                    case metadata.ParamType.context_response:\n                        serviceObject[key] = context.response;\n                        break;\n                    case metadata.ParamType.context_next:\n                        serviceObject[key] = context.next;\n                        break;\n                    default:\n                        break;\n                }\n            });\n        }\n        return serviceObject;\n    }\n    callTargetEndPoint(serviceClass, serviceMethod, req, res, next) {\n        let context = new server_types_1.ServiceContext();\n        context.request = req;\n        context.response = res;\n        context.next = next;\n        this.checkAcceptance(serviceMethod, context);\n        let serviceObject = this.createService(serviceClass, context);\n        let args = this.buildArgumentsList(serviceMethod, context);\n        let result = serviceClass.targetClass.prototype[serviceMethod.name].apply(serviceObject, args);\n        this.processResponseHeaders(serviceMethod, context);\n        this.sendValue(result, res, next);\n    }\n    sendValue(value, res, next) {\n        switch (typeof value) {\n            case \"number\":\n                res.send(value.toString());\n                break;\n            case \"string\":\n                res.send(value);\n                break;\n            case \"boolean\":\n                res.send(value.toString());\n                break;\n            case \"undefined\":\n                if (!res.headersSent) {\n                    res.sendStatus(204);\n                }\n                break;\n            default:\n                if (value.location && value instanceof server_types_1.ReferencedResource) {\n                    res.set(\"Location\", value.location);\n                    res.sendStatus(value.statusCode);\n                }\n                else if (value.then && value instanceof Promise) {\n                    let self = this;\n                    value.then(function (val) {\n                        self.sendValue(val, res, next);\n                    }).catch(function (err) {\n                        next(err);\n                    });\n                }\n                else {\n                    res.json(value);\n                }\n        }\n    }\n    buildArgumentsList(serviceMethod, context) {\n        let result = new Array();\n        serviceMethod.parameters.forEach(param => {\n            switch (param.paramType) {\n                case metadata.ParamType.path:\n                    result.push(this.convertType(context.request.params[param.name], param.type));\n                    break;\n                case metadata.ParamType.query:\n                    result.push(this.convertType(context.request.query[param.name], param.type));\n                    break;\n                case metadata.ParamType.header:\n                    result.push(this.convertType(context.request.header(param.name), param.type));\n                    break;\n                case metadata.ParamType.cookie:\n                    result.push(this.convertType(context.request.cookies[param.name], param.type));\n                    break;\n                case metadata.ParamType.body:\n                    result.push(this.convertType(context.request.body, param.type));\n                    break;\n                case metadata.ParamType.file:\n                    let files = context.request.files[param.name];\n                    if (files && files.length > 0) {\n                        result.push(files[0]);\n                    }\n                    break;\n                case metadata.ParamType.files:\n                    result.push(context.request.files[param.name]);\n                    break;\n                case metadata.ParamType.form:\n                    result.push(this.convertType(context.request.body[param.name], param.type));\n                    break;\n                case metadata.ParamType.context:\n                    result.push(context);\n                    break;\n                case metadata.ParamType.context_request:\n                    result.push(context.request);\n                    break;\n                case metadata.ParamType.context_response:\n                    result.push(context.response);\n                    break;\n                case metadata.ParamType.context_next:\n                    result.push(context.next);\n                    break;\n                case metadata.ParamType.context_accept:\n                    result.push(context.accept);\n                    break;\n                case metadata.ParamType.context_accept_language:\n                    result.push(context.language);\n                    break;\n                default:\n                    throw Error(\"Invalid parameter type\");\n            }\n        });\n        return result;\n    }\n    convertType(paramValue, paramType) {\n        let serializedType = paramType.name;\n        switch (serializedType) {\n            case \"Number\":\n                return paramValue ? parseFloat(paramValue) : 0;\n            case \"Boolean\":\n                return paramValue === 'true';\n            default:\n                return paramValue;\n        }\n    }\n    static resolveAllPaths() {\n        if (!InternalServer.pathsResolved) {\n            InternalServer.paths.clear();\n            InternalServer.serverClasses.forEach(classData => {\n                classData.methods.forEach(method => {\n                    if (!method.resolvedPath) {\n                        InternalServer.resolveProperties(classData, method);\n                    }\n                });\n            });\n            InternalServer.pathsResolved = true;\n        }\n    }\n    static getPaths() {\n        InternalServer.resolveAllPaths();\n        return new Set(InternalServer.paths.keys());\n    }\n    static getHttpMethods(path) {\n        InternalServer.resolveAllPaths();\n        let methods = InternalServer.paths.get(path);\n        return methods || new Set();\n    }\n    static resolveLanguages(serviceClass, serviceMethod) {\n        let resolvedLanguages = new Array();\n        if (serviceClass.languages) {\n            serviceClass.languages.forEach(lang => {\n                resolvedLanguages.push(lang);\n            });\n        }\n        if (serviceMethod.languages) {\n            serviceMethod.languages.forEach(lang => {\n                resolvedLanguages.push(lang);\n            });\n        }\n        if (resolvedLanguages.length > 0) {\n            serviceMethod.resolvedLanguages = resolvedLanguages;\n        }\n    }\n    static resolveAccepts(serviceClass, serviceMethod) {\n        let resolvedAccepts = new Array();\n        if (serviceClass.accepts) {\n            serviceClass.accepts.forEach(accept => {\n                resolvedAccepts.push(accept);\n            });\n        }\n        if (serviceMethod.accepts) {\n            serviceMethod.accepts.forEach(accept => {\n                resolvedAccepts.push(accept);\n            });\n        }\n        if (resolvedAccepts.length > 0) {\n            serviceMethod.resolvedAccepts = resolvedAccepts;\n        }\n    }\n    static resolveProperties(serviceClass, serviceMethod) {\n        InternalServer.resolveLanguages(serviceClass, serviceMethod);\n        InternalServer.resolveAccepts(serviceClass, serviceMethod);\n        InternalServer.resolvePath(serviceClass, serviceMethod);\n    }\n    static resolvePath(serviceClass, serviceMethod) {\n        let classPath = serviceClass.path ? serviceClass.path.trim() : \"\";\n        let resolvedPath = classPath.startsWith('/') ? classPath : '/' + classPath;\n        if (resolvedPath.endsWith('/')) {\n            resolvedPath = resolvedPath.slice(0, resolvedPath.length - 1);\n        }\n        if (serviceMethod.path) {\n            let methodPath = serviceMethod.path.trim();\n            resolvedPath = classPath + (methodPath.startsWith('/') ? methodPath : '/' + methodPath);\n        }\n        let declaredHttpMethods = InternalServer.paths.get(resolvedPath);\n        if (!declaredHttpMethods) {\n            declaredHttpMethods = new Set();\n            InternalServer.paths.set(resolvedPath, declaredHttpMethods);\n        }\n        if (declaredHttpMethods.has(serviceMethod.httpMethod)) {\n            throw Error(\"Duplicated declaration for path [\" + resolvedPath + \"], method [\"\n                + serviceMethod.httpMethod + \"]. \");\n        }\n        declaredHttpMethods.add(serviceMethod.httpMethod);\n        serviceMethod.resolvedPath = resolvedPath;\n    }\n}\nInternalServer.serverClasses = new Map();\nInternalServer.paths = new Map();\nInternalServer.pathsResolved = false;\nexports.InternalServer = InternalServer;\n"]}