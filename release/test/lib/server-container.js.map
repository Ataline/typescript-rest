{"version":3,"sources":["lib/server-container.js"],"names":["_map","require","_map2","_interopRequireDefault","_set","_set2","_promise","_promise2","_typeof2","_typeof3","_create","_create2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","obj","__esModule","default","bodyParser","cookieParser","multer","metadata","Errors","server_types_1","InternalServer","router","key","value","buildServices","_this","serverClasses","forEach","classData","methods","method","buildService","pathsResolved","handleNotAllowedMethods","serviceClass","serviceMethod","_this2","handler","req","res","next","callTargetEndPoint","resolvedPath","resolveProperties","middleware","buildServiceMiddleware","args","concat","push","httpMethod","HttpMethod","GET","get","apply","POST","post","PUT","put","DELETE","delete","HEAD","head","OPTIONS","options","PATCH","patch","Error","_this3","paths","getPaths","path","supported","getHttpMethods","allowedMethods","Array","allowed","join","all","set","MethodNotAllowedError","getUploader","upload","fileDest","dest","fileFilter","fileLimits","limits","_this4","result","mustParseCookies","cookiesSecret","cookiesDecoder","decode","mustParseBody","json","mustParseForms","urlencoded","extended","files","length","fileData","singleFile","name","fields","processResponseHeaders","context","resolvedLanguages","response","vary","language","resolvedAccepts","checkAcceptance","lang","request","acceptsLanguages","languages","accept","accepts","NotAcceptableError","createService","serviceObject","targetClass","hasProperties","properties","paramType","ParamType","context_accept_language","context_accept","context_request","context_response","context_next","ServiceContext","buildArgumentsList","prototype","sendValue","_this5","send","toString","headersSent","sendStatus","location","ReferencedResource","statusCode","then","self","val","catch","err","_this6","parameters","param","convertType","params","type","query","header","cookie","cookies","body","file","form","paramValue","serializedType","parseFloat","registerServiceClass","target","constructor","has","ServiceClass","registerServiceMethod","methodName","ServiceMethod","resolveAllPaths","clear","keys","resolveLanguages","resolveAccepts","resolvePath","classPath","trim","startsWith","endsWith","slice","methodPath","declaredHttpMethods","add","exports"],"mappings":"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","file":"server-container.js","sourcesContent":["\"use strict\";\nconst bodyParser = require(\"body-parser\");\nconst cookieParser = require(\"cookie-parser\");\nconst multer = require(\"multer\");\nconst metadata = require(\"./metadata\");\nconst Errors = require(\"./server-errors\");\nconst server_types_1 = require(\"./server-types\");\nclass InternalServer {\n    constructor(router) {\n        this.router = router;\n    }\n    static registerServiceClass(target) {\n        InternalServer.pathsResolved = false;\n        let name = target.name || target.constructor.name;\n        if (!InternalServer.serverClasses.has(name)) {\n            InternalServer.serverClasses.set(name, new metadata.ServiceClass(target));\n        }\n        let serviceClass = InternalServer.serverClasses.get(name);\n        return serviceClass;\n    }\n    static registerServiceMethod(target, methodName) {\n        if (methodName) {\n            InternalServer.pathsResolved = false;\n            let classData = InternalServer.registerServiceClass(target);\n            if (!classData.methods.has(methodName)) {\n                classData.methods.set(methodName, new metadata.ServiceMethod());\n            }\n            let serviceMethod = classData.methods.get(methodName);\n            return serviceMethod;\n        }\n        return null;\n    }\n    buildServices() {\n        InternalServer.serverClasses.forEach(classData => {\n            classData.methods.forEach(method => {\n                this.buildService(classData, method);\n            });\n        });\n        InternalServer.pathsResolved = true;\n        this.handleNotAllowedMethods();\n    }\n    buildService(serviceClass, serviceMethod) {\n        let handler = (req, res, next) => {\n            this.callTargetEndPoint(serviceClass, serviceMethod, req, res, next);\n        };\n        if (!serviceMethod.resolvedPath) {\n            InternalServer.resolveProperties(serviceClass, serviceMethod);\n        }\n        let middleware = this.buildServiceMiddleware(serviceMethod);\n        let args = [serviceMethod.resolvedPath];\n        args = args.concat(middleware);\n        args.push(handler);\n        switch (serviceMethod.httpMethod) {\n            case server_types_1.HttpMethod.GET:\n                this.router.get.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.POST:\n                this.router.post.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.PUT:\n                this.router.put.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.DELETE:\n                this.router.delete.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.HEAD:\n                this.router.head.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.OPTIONS:\n                this.router.options.apply(this.router, args);\n                break;\n            case server_types_1.HttpMethod.PATCH:\n                this.router.patch.apply(this.router, args);\n                break;\n            default:\n                throw Error(\"Invalid http method for service [\" + serviceMethod.resolvedPath + \"]\");\n        }\n    }\n    handleNotAllowedMethods() {\n        let paths = InternalServer.getPaths();\n        paths.forEach((path) => {\n            let supported = InternalServer.getHttpMethods(path);\n            let allowedMethods = new Array();\n            supported.forEach((method) => {\n                allowedMethods.push(server_types_1.HttpMethod[method]);\n            });\n            let allowed = allowedMethods.join(', ');\n            this.router.all(path, (req, res, next) => {\n                res.set('Allow', allowed);\n                throw new Errors.MethodNotAllowedError();\n            });\n        });\n    }\n    getUploader() {\n        if (!this.upload) {\n            let options = {};\n            if (InternalServer.fileDest) {\n                options.dest = InternalServer.fileDest;\n            }\n            if (InternalServer.fileFilter) {\n                options.fileFilter = InternalServer.fileFilter;\n            }\n            if (InternalServer.fileLimits) {\n                options.limits = InternalServer.fileLimits;\n            }\n            if (options.dest) {\n                this.upload = multer(options);\n            }\n            else {\n                this.upload = multer();\n            }\n        }\n        return this.upload;\n    }\n    buildServiceMiddleware(serviceMethod) {\n        let result = new Array();\n        if (serviceMethod.mustParseCookies) {\n            let args = [];\n            if (InternalServer.cookiesSecret) {\n                args.push(InternalServer.cookiesSecret);\n            }\n            if (InternalServer.cookiesDecoder) {\n                args.push({ decode: InternalServer.cookiesDecoder });\n            }\n            result.push(cookieParser.apply(this, args));\n        }\n        if (serviceMethod.mustParseBody) {\n            result.push(bodyParser.json());\n        }\n        if (serviceMethod.mustParseForms) {\n            result.push(bodyParser.urlencoded({ extended: true }));\n        }\n        if (serviceMethod.files.length > 0) {\n            let options = new Array();\n            serviceMethod.files.forEach(fileData => {\n                if (fileData.singleFile) {\n                    options.push({ \"name\": fileData.name, \"maxCount\": 1 });\n                }\n                else {\n                    options.push({ \"name\": fileData.name });\n                }\n            });\n            result.push(this.getUploader().fields(options));\n        }\n        return result;\n    }\n    processResponseHeaders(serviceMethod, context) {\n        if (serviceMethod.resolvedLanguages) {\n            if (serviceMethod.httpMethod === server_types_1.HttpMethod.GET) {\n                context.response.vary(\"Accept-Language\");\n            }\n            context.response.set(\"Content-Language\", context.language);\n        }\n        if (serviceMethod.resolvedAccepts) {\n            context.response.vary(\"Accept\");\n        }\n    }\n    checkAcceptance(serviceMethod, context) {\n        if (serviceMethod.resolvedLanguages) {\n            let lang = context.request.acceptsLanguages(serviceMethod.resolvedLanguages);\n            if (lang) {\n                context.language = lang;\n            }\n        }\n        else {\n            let languages = context.request.acceptsLanguages();\n            if (languages && languages.length > 0) {\n                context.language = languages[0];\n            }\n        }\n        if (serviceMethod.resolvedAccepts) {\n            let accept = context.request.accepts(serviceMethod.resolvedAccepts);\n            if (accept) {\n                context.accept = accept;\n            }\n            else {\n                throw new Errors.NotAcceptableError(\"Accept\");\n            }\n        }\n        if (!context.language) {\n            throw new Errors.NotAcceptableError(\"Accept-Language\");\n        }\n    }\n    createService(serviceClass, context) {\n        let serviceObject = Object.create(serviceClass.targetClass);\n        if (serviceClass.hasProperties()) {\n            serviceClass.properties.forEach((paramType, key) => {\n                switch (paramType) {\n                    case metadata.ParamType.context:\n                        serviceObject[key] = context;\n                        break;\n                    case metadata.ParamType.context_accept_language:\n                        serviceObject[key] = context.language;\n                        break;\n                    case metadata.ParamType.context_accept:\n                        serviceObject[key] = context.accept;\n                        break;\n                    case metadata.ParamType.context_request:\n                        serviceObject[key] = context.request;\n                        break;\n                    case metadata.ParamType.context_response:\n                        serviceObject[key] = context.response;\n                        break;\n                    case metadata.ParamType.context_next:\n                        serviceObject[key] = context.next;\n                        break;\n                    default:\n                        break;\n                }\n            });\n        }\n        return serviceObject;\n    }\n    callTargetEndPoint(serviceClass, serviceMethod, req, res, next) {\n        let context = new server_types_1.ServiceContext();\n        context.request = req;\n        context.response = res;\n        context.next = next;\n        this.checkAcceptance(serviceMethod, context);\n        let serviceObject = this.createService(serviceClass, context);\n        let args = this.buildArgumentsList(serviceMethod, context);\n        let result = serviceClass.targetClass.prototype[serviceMethod.name].apply(serviceObject, args);\n        this.processResponseHeaders(serviceMethod, context);\n        this.sendValue(result, res, next);\n    }\n    sendValue(value, res, next) {\n        switch (typeof value) {\n            case \"number\":\n                res.send(value.toString());\n                break;\n            case \"string\":\n                res.send(value);\n                break;\n            case \"boolean\":\n                res.send(value.toString());\n                break;\n            case \"undefined\":\n                if (!res.headersSent) {\n                    res.sendStatus(204);\n                }\n                break;\n            default:\n                if (value.location && value instanceof server_types_1.ReferencedResource) {\n                    res.set(\"Location\", value.location);\n                    res.sendStatus(value.statusCode);\n                }\n                else if (value.then && value instanceof Promise) {\n                    let self = this;\n                    value.then(function (val) {\n                        self.sendValue(val, res, next);\n                    }).catch(function (err) {\n                        next(err);\n                    });\n                }\n                else {\n                    res.json(value);\n                }\n        }\n    }\n    buildArgumentsList(serviceMethod, context) {\n        let result = new Array();\n        serviceMethod.parameters.forEach(param => {\n            switch (param.paramType) {\n                case metadata.ParamType.path:\n                    result.push(this.convertType(context.request.params[param.name], param.type));\n                    break;\n                case metadata.ParamType.query:\n                    result.push(this.convertType(context.request.query[param.name], param.type));\n                    break;\n                case metadata.ParamType.header:\n                    result.push(this.convertType(context.request.header(param.name), param.type));\n                    break;\n                case metadata.ParamType.cookie:\n                    result.push(this.convertType(context.request.cookies[param.name], param.type));\n                    break;\n                case metadata.ParamType.body:\n                    result.push(this.convertType(context.request.body, param.type));\n                    break;\n                case metadata.ParamType.file:\n                    let files = context.request.files[param.name];\n                    if (files && files.length > 0) {\n                        result.push(files[0]);\n                    }\n                    break;\n                case metadata.ParamType.files:\n                    result.push(context.request.files[param.name]);\n                    break;\n                case metadata.ParamType.form:\n                    result.push(this.convertType(context.request.body[param.name], param.type));\n                    break;\n                case metadata.ParamType.context:\n                    result.push(context);\n                    break;\n                case metadata.ParamType.context_request:\n                    result.push(context.request);\n                    break;\n                case metadata.ParamType.context_response:\n                    result.push(context.response);\n                    break;\n                case metadata.ParamType.context_next:\n                    result.push(context.next);\n                    break;\n                case metadata.ParamType.context_accept:\n                    result.push(context.accept);\n                    break;\n                case metadata.ParamType.context_accept_language:\n                    result.push(context.language);\n                    break;\n                default:\n                    throw Error(\"Invalid parameter type\");\n            }\n        });\n        return result;\n    }\n    convertType(paramValue, paramType) {\n        let serializedType = paramType.name;\n        switch (serializedType) {\n            case \"Number\":\n                return paramValue ? parseFloat(paramValue) : 0;\n            case \"Boolean\":\n                return paramValue === 'true';\n            default:\n                return paramValue;\n        }\n    }\n    static resolveAllPaths() {\n        if (!InternalServer.pathsResolved) {\n            InternalServer.paths.clear();\n            InternalServer.serverClasses.forEach(classData => {\n                classData.methods.forEach(method => {\n                    if (!method.resolvedPath) {\n                        InternalServer.resolveProperties(classData, method);\n                    }\n                });\n            });\n            InternalServer.pathsResolved = true;\n        }\n    }\n    static getPaths() {\n        InternalServer.resolveAllPaths();\n        return new Set(InternalServer.paths.keys());\n    }\n    static getHttpMethods(path) {\n        InternalServer.resolveAllPaths();\n        let methods = InternalServer.paths.get(path);\n        return methods || new Set();\n    }\n    static resolveLanguages(serviceClass, serviceMethod) {\n        let resolvedLanguages = new Array();\n        if (serviceClass.languages) {\n            serviceClass.languages.forEach(lang => {\n                resolvedLanguages.push(lang);\n            });\n        }\n        if (serviceMethod.languages) {\n            serviceMethod.languages.forEach(lang => {\n                resolvedLanguages.push(lang);\n            });\n        }\n        if (resolvedLanguages.length > 0) {\n            serviceMethod.resolvedLanguages = resolvedLanguages;\n        }\n    }\n    static resolveAccepts(serviceClass, serviceMethod) {\n        let resolvedAccepts = new Array();\n        if (serviceClass.accepts) {\n            serviceClass.accepts.forEach(accept => {\n                resolvedAccepts.push(accept);\n            });\n        }\n        if (serviceMethod.accepts) {\n            serviceMethod.accepts.forEach(accept => {\n                resolvedAccepts.push(accept);\n            });\n        }\n        if (resolvedAccepts.length > 0) {\n            serviceMethod.resolvedAccepts = resolvedAccepts;\n        }\n    }\n    static resolveProperties(serviceClass, serviceMethod) {\n        InternalServer.resolveLanguages(serviceClass, serviceMethod);\n        InternalServer.resolveAccepts(serviceClass, serviceMethod);\n        InternalServer.resolvePath(serviceClass, serviceMethod);\n    }\n    static resolvePath(serviceClass, serviceMethod) {\n        let classPath = serviceClass.path ? serviceClass.path.trim() : \"\";\n        let resolvedPath = classPath.startsWith('/') ? classPath : '/' + classPath;\n        if (resolvedPath.endsWith('/')) {\n            resolvedPath = resolvedPath.slice(0, resolvedPath.length - 1);\n        }\n        if (serviceMethod.path) {\n            let methodPath = serviceMethod.path.trim();\n            resolvedPath = classPath + (methodPath.startsWith('/') ? methodPath : '/' + methodPath);\n        }\n        let declaredHttpMethods = InternalServer.paths.get(resolvedPath);\n        if (!declaredHttpMethods) {\n            declaredHttpMethods = new Set();\n            InternalServer.paths.set(resolvedPath, declaredHttpMethods);\n        }\n        if (declaredHttpMethods.has(serviceMethod.httpMethod)) {\n            throw Error(\"Duplicated declaration for path [\" + resolvedPath + \"], method [\"\n                + serviceMethod.httpMethod + \"]. \");\n        }\n        declaredHttpMethods.add(serviceMethod.httpMethod);\n        serviceMethod.resolvedPath = resolvedPath;\n    }\n}\nInternalServer.serverClasses = new Map();\nInternalServer.paths = new Map();\nInternalServer.pathsResolved = false;\nexports.InternalServer = InternalServer;\n"]}